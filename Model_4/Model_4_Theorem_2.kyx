/* Exported from KeYmaera X v4.9.9 */

Theorem "Model Pitfalls/Model 4 and Theorem 2"
Description "Model 4 with ghost ctrl and the conjunct from Theorem 2 to identify ghost ctrl".
  
Definitions       /* function symbols cannot change their value */
  Real aMinS;     /* maximum braking - safety controller */
  Real aMaxN;     /* maximum acceleration - nominal controller */
  Real aMinN;     /* maximum braking - nominal controller */
  Real T;         /* maximum sampling time */
End.
    
ProgramVariables  /* program variables may change their value over time */
  Real x;         /* position of the ego car */
  Real v;         /* velocity of the ego car */
  Real a;         /* acceleration of the ego car */
  Real xCrit;     /* critical position, xCrit */
  Real tau;       /* clock variable */
End.


Problem           /* differential dynamic logic formula */ 
    x<=xCrit & aMinN >0 & aMaxN>0 & T>0
 -> 
    [
      {
        xCrit:=*;?(v^2<=2*aMinN*(xCrit-x)); /*env*/                                
        a:=*; ?(-aMinN<=a & a<=aMaxN & v^2 > 2*aMinN*(v*T+aMaxN*T*T*0.5)); /*sys */ 
        tau := 0; {x'=v, v'=a, tau'=1 & v>=0 & tau<=T} /* plant */
      }
    ] (x<=xCrit) 
End.

Tactic "Proof"
implyR('R=="x<=xCrit&aMinN()>0&aMaxN()>0&T()>0->[xCrit:=*;?v^2<=2*aMinN()*(xCrit-x);a:=*;?-aMinN()<=a&a<=aMaxN()&v^2>2*aMinN()*(v*T()+aMaxN()*T()*T()*0.5);tau:=0;{x'=v,v'=a,tau'=1&v>=0&tau<=T()}]x<=xCrit");
composeb('R=="[xCrit:=*;?v^2<=2*aMinN()*(xCrit-x);a:=*;?-aMinN()<=a&a<=aMaxN()&v^2>2*aMinN()*(v*T()+aMaxN()*T()*T()*0.5);tau:=0;{x'=v,v'=a,tau'=1&v>=0&tau<=T()}]x<=xCrit");
randomb('R=="[xCrit:=*;][?v^2<=2*aMinN()*(xCrit-x);a:=*;?-aMinN()<=a&a<=aMaxN()&v^2>2*aMinN()*(v*T()+aMaxN()*T()*T()*0.5);tau:=0;{x'=v,v'=a,tau'=1&v>=0&tau<=T()}]x<=xCrit");
allR('R=="\forall xCrit [?v^2<=2*aMinN()*(xCrit-x);a:=*;?-aMinN()<=a&a<=aMaxN()&v^2>2*aMinN()*(v*T()+aMaxN()*T()*T()*0.5);tau:=0;{x'=v,v'=a,tau'=1&v>=0&tau<=T()}]x<=xCrit");
composeb('R=="[?v^2<=2*aMinN()*(xCrit-x);a:=*;?-aMinN()<=a&a<=aMaxN()&v^2>2*aMinN()*(v*T()+aMaxN()*T()*T()*0.5);tau:=0;{x'=v,v'=a,tau'=1&v>=0&tau<=T()}]x<=xCrit");
testb('R=="[?v^2<=2*aMinN()*(xCrit-x);][a:=*;?-aMinN()<=a&a<=aMaxN()&v^2>2*aMinN()*(v*T()+aMaxN()*T()*T()*0.5);tau:=0;{x'=v,v'=a,tau'=1&v>=0&tau<=T()}]x<=xCrit");
implyR('R=="v^2<=2*aMinN()*(xCrit-x)->[a:=*;?-aMinN()<=a&a<=aMaxN()&v^2>2*aMinN()*(v*T()+aMaxN()*T()*T()*0.5);tau:=0;{x'=v,v'=a,tau'=1&v>=0&tau<=T()}]x<=xCrit");
composeb('R=="[a:=*;?-aMinN()<=a&a<=aMaxN()&v^2>2*aMinN()*(v*T()+aMaxN()*T()*T()*0.5);tau:=0;{x'=v,v'=a,tau'=1&v>=0&tau<=T()}]x<=xCrit");
randomb('R=="[a:=*;][?-aMinN()<=a&a<=aMaxN()&v^2>2*aMinN()*(v*T()+aMaxN()*T()*T()*0.5);tau:=0;{x'=v,v'=a,tau'=1&v>=0&tau<=T()}]x<=xCrit");
allR('R=="\forall a [?-aMinN()<=a&a<=aMaxN()&v^2>2*aMinN()*(v*T()+aMaxN()*T()*T()*0.5);tau:=0;{x'=v,v'=a,tau'=1&v>=0&tau<=T()}]x<=xCrit");
composeb('R=="[?-aMinN()<=a&a<=aMaxN()&v^2>2*aMinN()*(v*T()+aMaxN()*T()*T()*0.5);tau:=0;{x'=v,v'=a,tau'=1&v>=0&tau<=T()}]x<=xCrit");
testb('R=="[?-aMinN()<=a&a<=aMaxN()&v^2>2*aMinN()*(v*T()+aMaxN()*T()*T()*0.5);][tau:=0;{x'=v,v'=a,tau'=1&v>=0&tau<=T()}]x<=xCrit");
implyR('R=="-aMinN()<=a&a<=aMaxN()&v^2>2*aMinN()*(v*T()+aMaxN()*T()*T()*0.5)->[tau:=0;{x'=v,v'=a,tau'=1&v>=0&tau<=T()}]x<=xCrit");
composeb('R=="[tau:=0;{x'=v,v'=a,tau'=1&v>=0&tau<=T()}]x<=xCrit");
assignb('R=="[tau:=0;][{x'=v,v'=a,tau'=1&v>=0&tau<=T()}]x<=xCrit");
solve('R=="[{x'=v,v'=a,tau'=1&v>=0&tau<=T()}]x<=xCrit");
QE
End.

End.
